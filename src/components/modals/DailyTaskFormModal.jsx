import { useState, useEffect } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Box, Typography, Grid, FormControl, InputLabel, Select, MenuItem, Stack, alpha } from '@mui/material';
import { Assignment } from '@mui/icons-material';
import { COLORS } from '../../constants/colors';
import { DAILY_TASK_STATUS, TASK_PRIORITY } from '../../api/dailyTasksApi';
import { WEEKDAY_LABELS } from '../../api/slotApi';

const DailyTaskFormModal = ({ open, onClose, onSubmit, teams = [], tasks = [], slots = [] }) => {
    const [formData, setFormData] = useState({
        team_id: '',
        task_id: '',
        slot_id: '',
        title: '',
        priority: 'MEDIUM',
        status: 'SCHEDULED',
        assigned_date: new Date().toISOString().split('T')[0],
        start_time: '08:00',
        end_time: '17:00'
    });
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState({});

    useEffect(() => {
        if (open) {
            // Reset form when modal opens
            setFormData({
                team_id: '',
                task_id: '',
                slot_id: '',
                title: '',
                priority: 'MEDIUM',
                status: 'SCHEDULED',
                assigned_date: new Date().toISOString().split('T')[0],
                start_time: '08:00',
                end_time: '17:00'
            });
            setErrors({});
        }
    }, [open]);

    const handleChange = (field, value) => {
        setFormData(prev => {
            const newData = { ...prev, [field]: value };

            // If task_id changes, clear slot_id (slot depends on task)
            if (field === 'task_id') {
                newData.slot_id = '';
            }

            return newData;
        });

        // Clear error when user types
        if (errors[field]) {
            setErrors(prev => ({
                ...prev,
                [field]: null
            }));
        }
    };

    const validate = () => {
        const newErrors = {};

        if (!formData.team_id) {
            newErrors.team_id = 'Vui l√≤ng ch·ªçn team';
        }
        if (!formData.title || formData.title.trim() === '') {
            newErrors.title = 'Vui l√≤ng nh·∫≠p t√™n nhi·ªám v·ª•';
        }
        if (!formData.assigned_date) {
            newErrors.assigned_date = 'Vui l√≤ng ch·ªçn ng√†y';
        }
        if (!formData.start_time) {
            newErrors.start_time = 'Vui l√≤ng nh·∫≠p gi·ªù b·∫Øt ƒë·∫ßu';
        }
        if (!formData.end_time) {
            newErrors.end_time = 'Vui l√≤ng nh·∫≠p gi·ªù k·∫øt th√∫c';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async () => {
        if (!validate()) return;

        setLoading(true);
        try {
            await onSubmit(formData);
            handleClose();
        } catch (error) {
            console.error('Error creating daily task:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleClose = () => {
        if (!loading) {
            onClose();
        }
    };

    // Get filtered slots based on selected task
    const filteredSlots = formData.task_id
        ? slots.filter(slot => slot.task_id === formData.task_id)
        : slots;

    return (
        <Dialog
            open={open}
            onClose={handleClose}
            maxWidth="lg"
            fullWidth
            PaperProps={{
                sx: {
                    borderRadius: 3,
                    boxShadow: 24,
                    minHeight: '70vh'
                }
            }}
        >
            <DialogTitle sx={{
                borderBottom: `2px solid ${COLORS.PRIMARY[100]}`,
                pb: 2.5,
                pt: 2.5,
                background: `linear-gradient(135deg, ${alpha(COLORS.PRIMARY[50], 0.5)} 0%, ${alpha(COLORS.PRIMARY[100], 0.3)} 100%)`
            }}>
                <Stack direction="row" alignItems="center" spacing={2}>
                    <Box sx={{
                        width: 48,
                        height: 48,
                        borderRadius: 2,
                        bgcolor: COLORS.PRIMARY[100],
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                    }}>
                        <Assignment sx={{ color: COLORS.PRIMARY[600], fontSize: 28 }} />
                    </Box>
                    <Box>
                        <Typography variant="h5" fontWeight={700} color={COLORS.PRIMARY[700]}>
                            T·∫°o nhi·ªám v·ª• h·∫±ng ng√†y
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                            Giao nhi·ªám v·ª• cho team th·ª±c hi·ªán
                        </Typography>
                    </Box>
                </Stack>
            </DialogTitle>

            <DialogContent sx={{ pt: 3, pb: 3, px: 4 }}>
                <Stack spacing={3} sx={{ mt: 1 }}>
                    {/* Row 1: Team + Priority + Status */}
                    <Stack direction="row" spacing={2}>
                        <FormControl fullWidth error={!!errors.team_id} required>
                            <InputLabel>Team</InputLabel>
                            <Select
                                value={formData.team_id}
                                onChange={(e) => handleChange('team_id', e.target.value)}
                                label="Team"
                                disabled={loading}
                            >
                                {teams.map(team => (
                                    <MenuItem key={team.id} value={team.id}>
                                        {team.name}
                                    </MenuItem>
                                ))}
                            </Select>
                            {errors.team_id && (
                                <Typography variant="caption" color="error" sx={{ mt: 0.5, ml: 1.5 }}>
                                    {errors.team_id}
                                </Typography>
                            )}
                        </FormControl>

                        <FormControl sx={{ minWidth: 200 }} required>
                            <InputLabel>ƒê·ªô ∆∞u ti√™n</InputLabel>
                            <Select
                                value={formData.priority}
                                onChange={(e) => handleChange('priority', e.target.value)}
                                label="ƒê·ªô ∆∞u ti√™n"
                                disabled={loading}
                            >
                                <MenuItem value={TASK_PRIORITY.URGENT}>üî¥ Kh·∫©n c·∫•p</MenuItem>
                                <MenuItem value={TASK_PRIORITY.HIGH}>üü† Cao</MenuItem>
                                <MenuItem value={TASK_PRIORITY.MEDIUM}>üü° Trung b√¨nh</MenuItem>
                                <MenuItem value={TASK_PRIORITY.LOW}>üü¢ Th·∫•p</MenuItem>
                            </Select>
                        </FormControl>

                        <FormControl sx={{ minWidth: 180 }} required>
                            <InputLabel>Tr·∫°ng th√°i</InputLabel>
                            <Select
                                value={formData.status}
                                onChange={(e) => handleChange('status', e.target.value)}
                                label="Tr·∫°ng th√°i"
                                disabled={loading}
                            >
                                <MenuItem value={DAILY_TASK_STATUS.SCHEDULED}>Ch∆∞a b·∫Øt ƒë·∫ßu</MenuItem>
                                <MenuItem value={DAILY_TASK_STATUS.IN_PROGRESS}>ƒêang l√†m</MenuItem>
                                <MenuItem value={DAILY_TASK_STATUS.COMPLETED}>Ho√†n th√†nh</MenuItem>
                            </Select>
                        </FormControl>
                    </Stack>

                    {/* Row 2: Title */}
                    <TextField
                        fullWidth
                        required
                        label="T√™n nhi·ªám v·ª• *"
                        value={formData.title}
                        onChange={(e) => handleChange('title', e.target.value)}
                        error={!!errors.title}
                        helperText={errors.title || 'VD: V·ªá sinh kh·∫©n c·∫•p khu v·ª±c m√®o'}
                        disabled={loading}
                        placeholder="Nh·∫≠p t√™n nhi·ªám v·ª• c·∫ßn th·ª±c hi·ªán"
                    />

                    {/* Row 3: Task + Slot (Optional) */}
                    <Stack direction="row" spacing={2}>
                        <Box sx={{ flex: 1 }}>
                            <FormControl fullWidth>
                                <InputLabel>Nhi·ªám v·ª• g·ªëc</InputLabel>
                                <Select
                                    value={formData.task_id}
                                    onChange={(e) => handleChange('task_id', e.target.value)}
                                    label="Nhi·ªám v·ª• g·ªëc"
                                    disabled={loading}
                                >
                                    <MenuItem value="">
                                        <em>Kh√¥ng li√™n quan</em>
                                    </MenuItem>
                                    {tasks.map(task => (
                                        <MenuItem key={task.id} value={task.id}>
                                            {task.name || task.title}
                                        </MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Box>

                        <Box sx={{ flex: 1 }}>
                            <FormControl fullWidth>
                                <InputLabel>Ca</InputLabel>
                                <Select
                                    value={formData.slot_id}
                                    onChange={(e) => handleChange('slot_id', e.target.value)}
                                    label="Ca"
                                    disabled={loading || !formData.task_id}
                                >
                                    <MenuItem value="">
                                        <em>Kh√¥ng ch·ªçn</em>
                                    </MenuItem>
                                    {filteredSlots.map(slot => {
                                        const startTime = slot.start_time?.substring(0, 5) || '';
                                        const endTime = slot.end_time?.substring(0, 5) || '';
                                        const dayLabel = slot.day_of_week ? WEEKDAY_LABELS[slot.day_of_week] : '';
                                        const displayText = dayLabel
                                            ? `${startTime} - ${endTime} (${dayLabel})`
                                            : `${startTime} - ${endTime}`;

                                        return (
                                            <MenuItem key={slot.id} value={slot.id}>
                                                {displayText}
                                            </MenuItem>
                                        );
                                    })}
                                </Select>
                            </FormControl>
                            {!formData.task_id && (
                                <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, ml: 1.5, display: 'block' }}>
                                    Ch·ªçn nhi·ªám v·ª• g·ªëc tr∆∞·ªõc ƒë·ªÉ xem ca l√†m vi·ªác
                                </Typography>
                            )}
                        </Box>
                    </Stack>

                    {/* Row 4: Date + Time Range */}
                    <Stack direction="row" spacing={2}>
                        <TextField
                            fullWidth
                            required
                            type="date"
                            label="Ng√†y th·ª±c hi·ªán *"
                            value={formData.assigned_date}
                            onChange={(e) => handleChange('assigned_date', e.target.value)}
                            error={!!errors.assigned_date}
                            helperText={errors.assigned_date || 'Ng√†y ph·∫£i ho√†n th√†nh nhi·ªám v·ª•'}
                            disabled={loading}
                            InputLabelProps={{ shrink: true }}
                        />

                        <TextField
                            sx={{ minWidth: 180 }}
                            required
                            type="time"
                            label="Gi·ªù b·∫Øt ƒë·∫ßu *"
                            value={formData.start_time}
                            onChange={(e) => handleChange('start_time', e.target.value)}
                            error={!!errors.start_time}
                            helperText={errors.start_time}
                            disabled={loading}
                            InputLabelProps={{ shrink: true }}
                        />

                        <TextField
                            sx={{ minWidth: 180 }}
                            required
                            type="time"
                            label="Gi·ªù k·∫øt th√∫c *"
                            value={formData.end_time}
                            onChange={(e) => handleChange('end_time', e.target.value)}
                            error={!!errors.end_time}
                            helperText={errors.end_time}
                            disabled={loading}
                            InputLabelProps={{ shrink: true }}
                        />
                    </Stack>
                </Stack>

                <Box sx={{
                    mt: 4,
                    p: 2.5,
                    borderRadius: 2,
                    bgcolor: alpha(COLORS.INFO[50], 0.5),
                    border: `1px dashed ${COLORS.INFO[300]}`
                }}>
                    <Typography variant="body2" color="text.secondary" sx={{ lineHeight: 1.8 }}>
                        üí° <strong>L∆∞u √Ω:</strong> Nhi·ªám v·ª• n√†y s·∫Ω ƒë∆∞·ª£c giao cho team ngay l·∫≠p t·ª©c.
                        B·∫°n c√≥ th·ªÉ t·∫°o nhi·ªám v·ª• ƒë·ªôt xu·∫•t, c√≥ th·ªÉ kh√¥ng li√™n quan ƒë·∫øn Nhi·ªám v·ª• c√≥ s·∫µn ƒë·ªÉ x·ª≠ l√Ω c√°c t√¨nh hu·ªëng ph√°t sinh.
                    </Typography>
                </Box>
            </DialogContent>

            <DialogActions sx={{
                borderTop: `1px solid ${COLORS.GRAY[200]}`,
                px: 4,
                py: 2.5,
                gap: 2,
                bgcolor: alpha(COLORS.GRAY[50], 0.5)
            }}>
                <Button
                    onClick={handleClose}
                    disabled={loading}
                    variant="outlined"
                    size="large"
                    sx={{
                        minWidth: 120,
                        height: 44,
                        fontWeight: 600
                    }}
                >
                    H·ªßy
                </Button>
                <Button
                    onClick={handleSubmit}
                    disabled={loading}
                    variant="contained"
                    size="large"
                    sx={{
                        minWidth: 160,
                        height: 44,
                        fontWeight: 600,
                        boxShadow: 2
                    }}
                >
                    {loading ? 'ƒêang t·∫°o...' : 'T·∫°o nhi·ªám v·ª•'}
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default DailyTaskFormModal;

